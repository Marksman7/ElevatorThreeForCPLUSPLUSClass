

#include <iostream>
#include <string>
#include <sstream>

struct Node {
    int passer;
    struct Node * ElvatorList;
};

bool LetGo = false;

void Append(struct Node** Head, int NextNumber)
{
    
    struct Node* newNode = new Node;

    struct Node* Last = *Head;

    newNode->passer = NextNumber;

    newNode->ElvatorList = NULL;

    if (*Head == NULL)
    {
        *Head = newNode;
        return;
    }

    while (Last->ElvatorList != NULL)
    {
        Last = Last->ElvatorList;
    }

    Last->ElvatorList = newNode;
    return;
} 

void RunsThrough(int LevelChooseds, std::string LevelChoosed, std::string Current, struct Node *Head)
{
    int Tracker = 0;

    while (Head != NULL || LetGo == false)
    {
        if (LevelChooseds == Head->passer)
        {
            std::cout << "Welcome to level " + LevelChoosed + ".\n";
            LetGo = true;

            if (LevelChoosed == Current)
            {
                std::cout << "You are already on floor " + LevelChoosed + " and just to remind you that,\n";
            }

        }
        else
        {
            Tracker = Tracker + 1;
        }

        if (Tracker > 10 && LevelChoosed != "0")
        {
            std::cout << "Can you stop playing games with the eleveator and type in an acutal number on the list\n";
            LetGo = true;
        }

        Head = Head->ElvatorList;

    }
}

int main()
{

    struct Node* Head = NULL;

    int Tracker = 0;
    std::string LevelChoosed = "1";

    std::string Current = "b";

    int LevelChooseds;

    for (int i = 1; i <= 10; i++)
    {
        Append(&Head, i);
    }

    /*
    Append(&Head, 0);
    Append(&Head, 1);
    Append(&Head, 2);
    Append(&Head, 3);
    Append(&Head, 4);
    Append(&Head, 5);
    Append(&Head, 6);
    Append(&Head, 7);
    Append(&Head, 8);
    Append(&Head, 9);
    Append(&Head, 10);
    */

    //std::string ElvatorLevels[] = { "b", "1","2", "3", "4", "5", "6", "7", "8", "9" };

    //int* ElvatorLevelHeap = (int*)malloc(sizeof(int) * 100);

    while (LevelChoosed != "0")
    {
        Tracker = 0;

        std::cout << "\n";

        std::cout << "You are Currently on level 0 or as we call it b for basement\n";

        std::cout << "Type in the elvator level you want (10";

        /*for (int i = 1; i <= 10; i++)
        {
            Append(&Head, i);
        }*/

        for (int e = 0; e <= 10; e++)
        {
            //std::cout << ElvatorLevelHeap[e] + ", ";
        }

        std::cout << ") or type the number 0 to get off\n";

        std::cin >> LevelChoosed;

        if (LevelChoosed == "b")
        {
            LevelChooseds = 0;
        }
        else
        {
            for (int a = 0; a <= 10; a++)
            {
                std::stringstream pop;
                pop << a;
                std::string numberToString(pop.str());

                if (LevelChoosed == numberToString)
                {
                    LevelChooseds = a;
                    a = 11;
                }

            }
        }

        //Checker(LevelChoosed, LevelChooseds, Current, Head);

        /*for (int j = 0; j <= 10; j++)
        {
            if (LevelChooseds == Head->passer)
            {
                std::cout << "Welcome to level " + LevelChoosed + ".\n";

                if (LevelChoosed == Current)
                {
                    std::cout << "You are already on floor " + LevelChoosed + " and just to remind you that,\n";
                }

            }
            else
            {
                Tracker = Tracker + 1;
            }

            if (Tracker > 10 && LevelChoosed != "0")
            {
                std::cout << "Can you stop playing games with the eleveator and type in an acutal number on the list\n";
            }
        }*/

        //used this to see were it went wronged
        /*while (Head != NULL)
        {
            std::cout << Head->passer << "--";
            Head = Head->ElvatorList;
        }*/
        LetGo = false;
        RunsThrough(LevelChooseds, LevelChoosed, Current, Head);
        /*while (Head != NULL || LetGo == false)
        {
            if (LevelChooseds == Head->passer)
            {
                std::cout << "Welcome to level " + LevelChoosed + ".\n";
                LetGo = true;

                if (LevelChoosed == Current)
                {
                    std::cout << "You are already on floor " + LevelChoosed + " and just to remind you that,\n";
                }

            }
            else 
            {
                Tracker = Tracker + 1;
            }
            
            if (Tracker > 10 && LevelChoosed != "0")
            {
                std::cout << "Can you stop playing games with the eleveator and type in an acutal number on the list\n";
                LetGo = true;
            }

                Head = Head->ElvatorList;
            
        }*/

    }


    std::cout << "Thank You for useing this Elvator that is rated at -3/5 stars!\n";
}
